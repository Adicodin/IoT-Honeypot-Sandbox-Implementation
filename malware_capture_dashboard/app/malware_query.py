import requests
import os
import re
import json
from dotenv import load_dotenv
from datetime import datetime
import time

load_dotenv()
VT_API_KEY = os.getenv("VT_API_KEY")

CACHE_FILE = "vt_cache.json"
VT_RATE_LIMIT_SECONDS = 15  # VT Public API: 4 requests per minute

# === Load VT cache (shared across sessions) ===
if os.path.exists(CACHE_FILE):
    with open(CACHE_FILE, "r") as f:
        vt_cache = json.load(f)
else:
    vt_cache = {}

def save_cache():
    with open(CACHE_FILE, "w") as f:
        json.dump(vt_cache, f, indent=2)

def query_malware_info(hash_value):
    if not re.fullmatch(r"[a-fA-F0-9]{32}|[a-fA-F0-9]{40}|[a-fA-F0-9]{64}", hash_value):
        return None

    # === Check cache ===
    if hash_value in vt_cache:
        print(f"[CACHE] Using cached result for {hash_value}")
        return vt_cache[hash_value]

    headers = {"x-apikey": VT_API_KEY}
    url = f"https://www.virustotal.com/api/v3/files/{hash_value}"

    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            attributes = data.get("data", {}).get("attributes", {})

            is_iot = is_iot_malware(attributes)

            malware_name = attributes.get("meaningful_name") or "Unknown"
            type_desc = attributes.get("type_description", "Unknown")
            size = attributes.get("size", 0)
            analysis_stats = attributes.get("last_analysis_stats", {})
            sha256_malware = attributes.get("sha256", hash_value)
            malicious_count = analysis_stats.get("malicious", 0)
            total_engines = sum(analysis_stats.values())
            threat_label = attributes.get("popular_threat_classification", {}).get("suggested_threat_label", "Unknown")
            first_sub = attributes.get("first_submission_date")
            last_analysis = attributes.get("last_analysis_date")
            reputation = attributes.get("reputation", 0)
            vt_link = f"https://www.virustotal.com/gui/file/{hash_value}"
            malwarebazaar_link = f"https://bazaar.abuse.ch/sample/{sha256_malware}/"

            result = {
                "name": malware_name, "type": type_desc,
                "size": f"{size} bytes", "detections": f"{malicious_count}/{total_engines}",
                "threat_label": threat_label, "first_seen": datetime.utcfromtimestamp(first_sub).strftime('%Y-%m-%d %H:%M:%S') if first_sub else "N/A",
                "last_analysis": datetime.utcfromtimestamp(last_analysis).strftime('%Y-%m-%d %H:%M:%S') if last_analysis else "N/A",
                "reputation": reputation,
                "vt_link": vt_link,
		"malwarebazaar_link": malwarebazaar_link,
		"sha256_malware": sha256_malware,
                "is_iot": is_iot
            }
            vt_cache[hash_value] = result
            save_cache()
            time.sleep(VT_RATE_LIMIT_SECONDS)  # throttle to prevent abuse
            return result

        elif response.status_code == 404:
            result = {
                "name": "Not Found on VT",  "type": "-",
                "size": "-", "detections": "-",
                "threat_label": "-", "first_seen": "-",
                "last_analysis": "-", "reputation": "-",
                "vt_link": "-", "malwarebazaar_link": "-",
                "sha256_malware": "-", "is_iot": False
            }
            vt_cache[hash_value] = result
            save_cache()
            return result

        else:
            return {
                "name": f"VT Error: {response.status_code}",
                "type": "-",
                "size": "-",
                "detections": "-",
                "threat_label": "-",
                "first_seen": "-",
                "last_analysis": "-",
                "reputation": "-",
                "vt_link": "-",
		"malwarebazaar_link": "-",
                "sha256_malware": "-",
                "is_iot": False
            }

    except Exception as e:
        return {
            "name": f"Error: {str(e)}",
            "type": "-",
            "size": "-",
            "detections": "-",
            "threat_label": "-",
            "first_seen": "-",
            "last_analysis": "-",
            "reputation": "-",
            "vt_link": "-",
            "malwarebazaar_link": "-",
            "sha256_malware": "-",
            "is_iot": False
        }


def is_iot_malware(attr):
    iot_keywords = {        "mirai", "gafgyt", "mozi", "vpnfilter", "lightaidra", "okiru", "reaper", "hajime",
        "router", "camera", "dvr", "cctv", "nas", "mips", "sh4", "ppc", "arm", "iot",
        "openwrt", "busybox", "dropbear", "hnap", "tr-069", "fritzbox", "zombie"
    }
    iot_ports = {"21", "22", "23", "2323", "80", "8080", "443", "5555", "7547", "9000", "49152"}
    file_type = attr.get("type_description", "").lower()
    type_tags = attr.get("type_tags", [])
    magic = attr.get("magic", "").lower()
    trid = attr.get("trid", [])
    tags = attr.get("tags", [])
    size = attr.get("size", 0)
    if "pe" in type_tags or "win" in file_type:
        return False  # not IoT malware
    if any(k in magic for k in iot_keywords):
        return True
    if any(t.get("file_type", "").lower() in iot_keywords for t in trid):
        return True
    threat_names = attr.get("popular_threat_classification", {}).get("popular_threat_name", [])
    if any(any(k in name.get("value", "").lower() for k in iot_keywords) for name in threat_names):
        return True
    if any(tag.lower() in iot_keywords for tag in tags):
        return True
    yara_matches = attr.get("crowdsourced_yara_results", [])
    if any(any(k in match.get("rule_name", "").lower() for k in iot_keywords) for match in yara_matches):
        return True
    rules = attr.get("crowdsourced_ids_results", [])
    for rule in rules:
        msg = rule.get("rule_msg", "").lower()
        if any(f"port {p}" in msg for p in iot_ports):
            return True
        if any(k in msg for k in iot_keywords):
            return True
    if size < 150000:
        return True
    return False
