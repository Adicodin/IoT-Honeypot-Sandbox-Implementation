import os
import time
import threading
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from .malware_query import query_malware_info
from datetime import datetime
import re

WATCH_DIRS = [
    os.path.expanduser("~/tpotce/data/dicompot"),
    os.path.expanduser("~/tpotce/data/medpot"),
    os.path.expanduser("~/tpotce/data/conpot"),
    os.path.expanduser("~/tpotce/data/dionaea/binaries"),
    os.path.expanduser("~/tpotce/data/ipphoney"),
    os.path.expanduser("~/tpotce/data/miniprint"),
    os.path.expanduser("~/tpotce/data/cowrie/downloads"),
]

analyzed_files = set()
malware_records = []

def extract_source_from_path(filepath):
    parts = filepath.split("/data/")
    if len(parts) > 1:
        return parts[1].split("/")[0]
    return "unknown"

def analyze_file(filepath):
    filename = os.path.basename(filepath)

    if filename in analyzed_files:
        return

    if not re.fullmatch(r"[a-fA-F0-9]{32}|[a-fA-F0-9]{40}|[a-fA-F0-9]{64}", filename):
        return

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    source = extract_source_from_path(filepath)

    malware_info = query_malware_info(filename)

    sha256_malware = malware_info.get("sha256_malware", filename)

    record = {
        "timestamp": timestamp,
        "source": source,
        "hash": filename,
        "malware_name": malware_info.get("name", "Unknown Malware"),
        "type": malware_info.get("type", "Unknown"),
        "size": malware_info.get("size", "N/A"),
        "detections": malware_info.get("detections", "N/A"),
        "threat_label": malware_info.get("threat_label", "N/A"),
        "first_seen": malware_info.get("first_seen", "N/A"),
        "last_analysis": malware_info.get("last_analysis", "N/A"),
        "reputation": malware_info.get("reputation", "N/A"),
        "vt_link": malware_info.get("vt_link", "N/A"),
        "malwarebazaar_link": malware_info.get("malwarebazaar_link", "N/A"),
	"is_iot": malware_info.get("is_iot", False)
    }

    malware_records.insert(0, record)
    analyzed_files.add(filename)
    print(f"[+] Analyzed: {filename} | Detected: {record['malware_name']} | VT link: {record['vt_link']}")

def initial_directory_scan():
    print("[*] Performing initial directory scan...")
    for dir_path in WATCH_DIRS:
        for root, _, files in os.walk(dir_path):
            for f in files:
                filepath = os.path.join(root, f)
                analyze_file(filepath)
#		time.sleep(0.01)  # small delay to reduce CPU spike
    print("[*] Initial scan complete.")

class NewFileHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            print(f"[DEBUG] New file created: {event.src_path}")
            analyze_file(event.src_path)

    def on_modified(self, event):
        if not event.is_directory:
            print(f"[DEBUG] File modified: {event.src_path}")
            analyze_file(event.src_path)

    def on_moved(self, event):
        if not event.is_directory:
            print(f"[DEBUG] File moved: from {event.src_path} to {event.dest_path}")
            analyze_file(event.dest_path)

def start_monitoring():
    initial_directory_scan()

    event_handler = NewFileHandler()
    observer = Observer()

    for dir_path in WATCH_DIRS:
        observer.schedule(event_handler, path=dir_path, recursive=True)

    print("[*] Starting directory monitoring...")
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("[*] Stopping monitoring.")
        observer.stop()

    observer.join()


